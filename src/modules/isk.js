const { getAuthorizedCharacter } = require('../services/esi');
const axios = require('axios');

module.exports = async function iskModule(tg_id, chat_id, bot) {
  try {
    const char = await getAuthorizedCharacter(tg_id);
    const { access_token, character_id } = char;

    const response = await axios.get(`https://esi.evetech.net/latest/characters/${character_id}/wallet/`, {
      headers: { Authorization: `Bearer ${access_token}` }
    });

    const balance = Math.floor(response.data).toLocaleString('ru-RU');
    bot.sendMessage(chat_id, `üí∞ –ë–∞–ª–∞–Ω—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${char.character_name}:\n${balance} ISK`);
  } catch (err) {
    if (err === 'not found') {
      const loginUrl = require('../services/esi').getLoginURL(chat_id);
      return bot.sendMessage(chat_id, '‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ EVE:', {
        reply_markup: {
          inline_keyboard: [[{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', url: loginUrl }]]
        }
      });
    }

    if (err === 'refresh_failed') {
      return bot.sendMessage(chat_id, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /change –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.');
    }

    console.error('[ISK MODULE ERROR]', err);
    bot.sendMessage(chat_id, 'üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.');
  }
};
