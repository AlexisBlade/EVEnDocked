const fs = require('fs');
const path = require('path');
const { safeRequest, safeGetCharacter } = require('../services/safeAxios');
const resolveNames = require('../utils/resolveNames');

const skillsCache = new Map();

module.exports = async function skillsModule(tg_id, chat_id, bot, query = null) {
  if (query?.id) await bot.answerCallbackQuery(query.id);

  const raw = query?.data;
  const action = raw?.startsWith('skills_') ? raw.replace('skills_', '') : 'main';

  let char;
  try {
    char = await safeGetCharacter(tg_id);
  } catch (e) {
    return bot.sendMessage(chat_id, '‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start.');
  }

  const { character_id, character_name } = char;

  if (!action || action === 'main') {
    return bot.sendMessage(chat_id, `üß† –°–∫–∏–ª–ª—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${character_name}`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìö –ü—Ä–æ–∫–∞—á–∞–Ω–Ω—ã–µ', callback_data: 'skills_view_trained' }],
          [{ text: '‚è≥ –û—á–µ—Ä–µ–¥—å', callback_data: 'skills_view_queue' }],
          [{ text: 'üë§ –û –ø–µ—Ä—Å–æ–Ω–∞–∂–µ', callback_data: 'skills_attributes' }],
          [{ text: 'üíæ –≠–∫—Å–ø–æ—Ä—Ç JSON', callback_data: 'skills_export' }],
          [{ text: 'üìã –ú–µ–Ω—é', callback_data: 'menu_page_0' }]
        ]
      }
    });
  }

  if (action === 'view_trained') {
    const { data } = await safeRequest(tg_id, {
      method: 'get',
      url: `https://esi.evetech.net/latest/characters/${character_id}/skills/`
    });

    const skills = data.skills || [];
    const total_sp = data.total_sp;
    const names = await resolveNames(skills.map(s => s.skill_id), char.access_token);

    const exportData = skills.map((s, i) => ({
      id: s.skill_id,
      name: names[i],
      level: s.trained_skill_level,
      sp: s.skillpoints_in_skill
    }));

    if (!skillsCache.has(tg_id)) skillsCache.set(tg_id, {});
    skillsCache.get(tg_id).trained = exportData;

    const sorted = exportData
      .sort((a, b) => b.sp - a.sp)
      .map(s => `üìò ${s.name} | L${s.level} | ${s.sp.toLocaleString('ru-RU')} SP`);

    const chunks = [];
    for (let i = 0; i < sorted.length; i += 30) {
      chunks.push(sorted.slice(i, i + 30).join('\n'));
    }

    await bot.sendMessage(chat_id, `üìö –ü—Ä–æ–∫–∞—á–∞–Ω–Ω—ã–µ —Å–∫–∏–ª–ª—ã (${total_sp.toLocaleString('ru-RU')} SP):`);
    for (const chunk of chunks) {
      await bot.sendMessage(chat_id, chunk);
    }

    return bot.sendMessage(chat_id, 'üìã –ú–µ–Ω—é: /start', {
      reply_markup: {
        inline_keyboard: [[{ text: 'üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é', callback_data: 'menu_page_0' }]]
      }
    });
  }

  if (action === 'view_queue') {
    const { data } = await safeRequest(tg_id, {
      method: 'get',
      url: `https://esi.evetech.net/latest/characters/${character_id}/skillqueue/`
    });

    const names = await resolveNames(data.map(i => i.skill_id), char.access_token);
    const now = Date.now();

    const queueData = data.map((item, i) => ({
      id: item.skill_id,
      name: names[i],
      target_level: item.finished_level,
      start: item.start_date,
      end: item.finish_date
    }));

    if (!skillsCache.has(tg_id)) skillsCache.set(tg_id, {});
    skillsCache.get(tg_id).queue = queueData;

    const list = queueData.map((item) => {
      const end = new Date(item.end).getTime();
      const mins = Math.max(0, Math.round((end - now) / 60000));
      return `üß† ${item.name} ‚Üí L${item.target_level} | ${mins} –º–∏–Ω`;
    });

    const chunks = [];
    for (let i = 0; i < list.length; i += 30) {
      chunks.push(list.slice(i, i + 30).join('\n'));
    }

    await bot.sendMessage(chat_id, `‚è≥ –û—á–µ—Ä–µ–¥—å –ø—Ä–æ–∫–∞—á–∫–∏:`);
    for (const chunk of chunks) {
      await bot.sendMessage(chat_id, chunk);
    }

    return bot.sendMessage(chat_id, 'üìã –ú–µ–Ω—é: /start', {
      reply_markup: {
        inline_keyboard: [[{ text: 'üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é', callback_data: 'menu_page_0' }]]
      }
    });
  }

  if (action === 'attributes') {
    let msg = `üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ ${character_name}*\n\n`;

    // –ê—Ç—Ä–∏–±—É—Ç—ã
    const { data: attr } = await safeRequest(tg_id, {
      method: 'get',
      url: `https://esi.evetech.net/latest/characters/${character_id}/attributes/`
    });

    msg += `üß¨ *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n`;
    msg += `‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: *${attr.intelligence}*\n`;
    msg += `‚Ä¢ –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ: *${attr.perception}*\n`;
    msg += `‚Ä¢ –ü–∞–º—è—Ç—å: *${attr.memory}*\n`;
    msg += `‚Ä¢ –°–∏–ª–∞ –≤–æ–ª–∏: *${attr.willpower}*\n`;
    msg += `‚Ä¢ –•–∞—Ä–∏–∑–º–∞: *${attr.charisma}*\n`;

    // –ë—É—Å—Ç–µ—Ä
    if (attr.acceleration_booster) {
      const boosterName = await resolveNames([attr.acceleration_booster.booster_type_id], char.access_token);
      const expires = new Date(attr.acceleration_booster.expires_at);
      const expiresLocal = expires.toLocaleString('ru-RU');
      const remainingMins = Math.round((expires.getTime() - Date.now()) / 60000);
      const remaining = remainingMins > 60
        ? `${Math.floor(remainingMins / 60)}—á ${remainingMins % 60}–º`
        : `${remainingMins} –º–∏–Ω`;
      msg += `\nüíä *–ë—É—Å—Ç–µ—Ä:* ${boosterName[0]} (–¥–æ ${expiresLocal}, –æ—Å—Ç–∞–ª–æ—Å—å ${remaining})`;
    } else {
      msg += `\nüíä *–ë—É—Å—Ç–µ—Ä:* _–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö_`;
    }

    // –ò–º–ø–ª–∞–Ω—Ç—ã
    try {
      const { data: clone } = await safeRequest(tg_id, {
        method: 'get',
        url: `https://esi.evetech.net/latest/characters/${character_id}/clones/`
      });

      if (clone?.implants?.length) {
        const implantNames = await resolveNames(clone.implants, char.access_token);
        msg += `\n\nüß† *–ò–º–ø–ª–∞–Ω—Ç—ã:*\n`;
        clone.implants.forEach((id, idx) => {
          msg += `‚Ä¢ –°–ª–æ—Ç ${idx + 1}: ${implantNames[idx]}\n`;
        });
      } else {
        msg += `\n\nüß† *–ò–º–ø–ª–∞–Ω—Ç—ã:* _–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã_`;
      }
    } catch {
      msg += `\n\nüß† *–ò–º–ø–ª–∞–Ω—Ç—ã:* _–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–µ—Ç –ø—Ä–∞–≤)_`;
    }

    return bot.sendMessage(chat_id, msg, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: 'üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é', callback_data: 'menu_page_0' }]]
      }
    });
  }

  if (action === 'export') {
    const cached = skillsCache.get(tg_id);
    if (!cached || (!cached.trained && !cached.queue)) {
      return bot.sendMessage(chat_id, '‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π –ø—Ä–æ–∫–∞—á–∞–Ω–Ω–æ–µ –∏ –æ—á–µ—Ä–µ–¥—å.');
    }

    const fullExport = {
      character: character_name,
      character_id,
      trained: cached.trained || [],
      queue: cached.queue || [],
      exported_at: new Date().toISOString()
    };

    const filename = `skills_export_${tg_id}_${Date.now()}.json`;
    const filepath = path.join('/tmp', filename);
    fs.writeFileSync(filepath, JSON.stringify(fullExport, null, 2));

    return bot.sendDocument(chat_id, filepath, {}, {
      filename,
      contentType: 'application/json'
    });
  }
};
