const { getAuthorizedCharacter } = require('../services/esi');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const resolveNames = require('../utils/resolveNames');
const sendWithMenu = require('../utils/sendWithMenu');

// –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç
const skillsCache = new Map();

module.exports = async function skillsModule(tg_id, chat_id, bot, query = null) {
  // ‚úÖ Telegram —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query, –∏–Ω–∞—á–µ –≤—Å—ë –≤–∏—Å–Ω–µ—Ç
  if (query?.id) {
    await bot.answerCallbackQuery(query.id);
  }

  const action = query?.data?.replace('skills_', '');

  try {
    const char = await getAuthorizedCharacter(tg_id);
    const { character_id, access_token, character_name } = char;

    // –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞
    if (!action || action === 'main') {
      return bot.sendMessage(chat_id, `üß† –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥–ª—è ${character_name}?`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìö –ü—Ä–æ–∫–∞—á–∞–Ω–Ω—ã–µ', callback_data: 'skills_view_trained' }],
            [{ text: '‚è≥ –û—á–µ—Ä–µ–¥—å', callback_data: 'skills_view_queue' }],
            [{ text: 'üíæ –≠–∫—Å–ø–æ—Ä—Ç JSON', callback_data: 'skills_export' }],
            [{ text: 'üìã –ú–µ–Ω—é', callback_data: 'menu_page_0' }]
          ]
        }
      });
    }

    // –≠–∫—Å–ø–æ—Ä—Ç
    if (action === 'export') {
      const lastData = skillsCache.get(tg_id);
      if (!lastData) {
        return sendWithMenu(bot, chat_id, '‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ "–ü—Ä–æ–∫–∞—á–∞–Ω–Ω—ã–µ" –∏–ª–∏ "–û—á–µ—Ä–µ–¥—å".');
      }

      const filename = `skills_${tg_id}_${Date.now()}.json`;
      const filepath = path.join('/tmp', filename);
      fs.writeFileSync(filepath, JSON.stringify(lastData, null, 2));

      return bot.sendDocument(chat_id, filepath, {}, {
        filename,
        contentType: 'application/json'
      });
    }

    // –ü—Ä–æ–∫–∞—á–∞–Ω–Ω—ã–µ
    if (action === 'view_trained') {
      const { data } = await axios.get(
        `https://esi.evetech.net/latest/characters/${character_id}/skills/`,
        { headers: { Authorization: `Bearer ${access_token}` } }
      );

      const total_sp = data.total_sp;
      const skills = data.skills || [];

      const skillNames = await resolveNames(skills.map(s => s.skill_id), access_token);

      const exportData = skills.map((s, i) => ({
        name: skillNames[i],
        skill_id: s.skill_id,
        level: s.trained_skill_level,
        sp: s.skillpoints_in_skill
      }));
      skillsCache.set(tg_id, exportData);

      const full = exportData
        .sort((a, b) => b.sp - a.sp)
        .map(s => `üìò ${s.name} | –£—Ä–æ–≤–µ–Ω—å ${s.level} | ${s.sp.toLocaleString('ru-RU')} SP`)
        .join('\n');

      return sendWithMenu(bot, chat_id, `üìö –í—Å–µ –Ω–∞–≤—ã–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${character_name} (${total_sp.toLocaleString('ru-RU')} SP)\n\n${full}`);
    }

    // –û—á–µ—Ä–µ–¥—å
    if (action === 'view_queue') {
      const { data } = await axios.get(
        `https://esi.evetech.net/latest/characters/${character_id}/skillqueue/`,
        { headers: { Authorization: `Bearer ${access_token}` } }
      );

      const ids = data.map(i => i.skill_id);
      const names = await resolveNames(ids, access_token);

      const now = new Date();

      const list = data.map((item, i) => {
        const end = item.finish_date ? new Date(item.finish_date) : null;
        const mins = end ? Math.round((end - now) / 60000) : null;
        return `üß† ${names[i]} ‚Üí –£—Ä–æ–≤–µ–Ω—å ${item.finished_level} ${mins ? `| –û—Å—Ç–∞–ª–æ—Å—å: ${mins} –º–∏–Ω` : ''}`;
      }).join('\n');

      skillsCache.set(tg_id, data);

      return sendWithMenu(bot, chat_id, `‚è≥ –û—á–µ—Ä–µ–¥—å –ø—Ä–æ–∫–∞—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${character_name}:\n\n${list}`);
    }

  } catch (err) {
    if (err === 'not found') {
      const loginUrl = require('../services/esi').getLoginURL(chat_id);
      return bot.sendMessage(chat_id, '‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ EVE Online:', {
        reply_markup: {
          inline_keyboard: [[{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', url: loginUrl }]]
        }
      });
    }

    if (err === 'refresh_failed') {
      return bot.sendMessage(chat_id, '‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /change.');
    }

    return bot.sendMessage(chat_id, `üö® –û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ —Å–∫–∏–ª–ª–æ–≤:\n${err.message}`);
  }
};
